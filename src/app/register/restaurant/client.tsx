'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import {
  Box,
  Container,
  Typography,
  Card,
  CardContent,
  IconButton,
  TextField,
  Button,
  Alert,
  CircularProgress,
  InputAdornment,
  Divider
} from '@mui/material'
import {
  ArrowBack as ArrowBackIcon,
  Store as StoreIcon,
  Person as PersonIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  Lock as LockIcon,
  LocationOn as LocationIcon,
  MyLocation as MyLocationIcon,
  Business as BusinessIcon,
  Schedule as ScheduleIcon,
  Visibility,
  VisibilityOff
} from '@mui/icons-material'
import GoogleMapEmbed from '@/components/GoogleMapEmbed'

interface FormData {
  ownerName: string
  email: string
  phone: string
  password: string
  confirmPassword: string
  restaurantName: string
  description: string
  address: string
  latitude?: number
  longitude?: number
  deliveryTime: string
}

interface LocationState {
  loading: boolean
  error: string | null
  coordinates: { lat: number; lng: number } | null
}

export default function RestaurantRegisterClient() {
  const router = useRouter()
  const [formData, setFormData] = useState<FormData>({
    ownerName: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    restaurantName: '',
    description: '',
    address: '',
    deliveryTime: ''
  })
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)
  const [locationState, setLocationState] = useState<LocationState>({
    loading: false,
    error: null,
    coordinates: null
  })

  const handleInputChange = (field: keyof FormData) => (event: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [field]: event.target.value
    }))
    setError(null)
  }

  const getCurrentLocation = async () => {
    if (!navigator.geolocation) {
      setLocationState(prev => ({ ...prev, error: '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á' }))
      return
    }

    setLocationState({ loading: true, error: null, coordinates: null })

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const { latitude, longitude } = position.coords
        
        try {
          // ‡πÉ‡∏ä‡πâ OpenStreetMap Nominatim
          const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=th`
          )
          
          if (response.ok) {
            const data = await response.json()
            let address = ''
            
            if (data.address) {
              const parts = []
              if (data.address.house_number) parts.push(data.address.house_number)
              if (data.address.road) parts.push(data.address.road)
              if (data.address.suburb) parts.push(data.address.suburb)
              if (data.address.city_district || data.address.city) parts.push(data.address.city_district || data.address.city)
              if (data.address.state) parts.push(data.address.state)
              if (data.address.postcode) parts.push(data.address.postcode)
              
              address = parts.join(' ')
            }

            setFormData(prev => ({
              ...prev,
              address: address || `‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î ${latitude.toFixed(6)}, ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î ${longitude.toFixed(6)}`,
              latitude,
              longitude
            }))

            setLocationState({
              loading: false,
              error: null,
              coordinates: { lat: latitude, lng: longitude }
            })
          } else {
            throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ')
          }
        } catch (error) {
          console.error('Reverse geocoding error:', error)
          // ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ó‡∏ô
          setFormData(prev => ({
            ...prev,
            address: `‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î ${latitude.toFixed(6)}, ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î ${longitude.toFixed(6)}`,
            latitude,
            longitude
          }))

          setLocationState({
            loading: false,
            error: null,
            coordinates: { lat: latitude, lng: longitude }
          })
        }
      },
      (error) => {
        let errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ'
        
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
            break
          case error.POSITION_UNAVAILABLE:
            errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ'
            break
          case error.TIMEOUT:
            errorMessage = '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
            break
        }

        setLocationState({
          loading: false,
          error: errorMessage,
          coordinates: null
        })
      }
    )
  }

  const validateForm = () => {
    if (!formData.ownerName || !formData.email || !formData.phone || !formData.password) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
      return false
    }

    if (!formData.restaurantName || !formData.address) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
      return false
    }

    if (!formData.latitude || !formData.longitude) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å')
      return false
    }

    if (formData.password.length < 6) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
      return false
    }

    if (formData.password !== formData.confirmPassword) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô')
      return false
    }

    if (!/\S+@\S+\.\S+/.test(formData.email)) {
      setError('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
      return false
    }

    if (!/^0\d{8,9}$/.test(formData.phone)) {
      setError('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô 0812345678)')
      return false
    }

    return true
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: formData.ownerName,
          email: formData.email,
          phone: formData.phone,
          password: formData.password,
          latitude: formData.latitude,
          longitude: formData.longitude,
          role: 'RESTAURANT_OWNER',
          restaurant: {
            name: formData.restaurantName,
            description: formData.description,
            address: formData.address,
            deliveryTime: formData.deliveryTime || '30-45 ‡∏ô‡∏≤‡∏ó‡∏µ'
          }
        })
      })

      if (response.ok) {
        setSuccess(true)
        setTimeout(() => {
          router.push('/login?message=restaurant_registration_success')
        }, 2000)
      } else {
        const errorData = await response.json()
        setError(errorData.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å')
      }
    } catch (error) {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
    } finally {
      setLoading(false)
    }
  }

  if (success) {
    return (
      <Box sx={{ backgroundColor: '#FAFAFA', minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <Container maxWidth="sm" sx={{ px: 2 }}>
          <Card sx={{ borderRadius: 3, textAlign: 'center', p: 4 }}>
            <Typography variant="h4" sx={{ mb: 2 }}>üè™</Typography>
            <Typography variant="h5" fontWeight={600} sx={{ mb: 2, color: '#FF9800' }}>
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...
            </Typography>
            <CircularProgress size={30} sx={{ color: '#FF9800' }} />
          </Card>
        </Container>
      </Box>
    )
  }

  return (
    <Box sx={{ backgroundColor: '#FAFAFA', minHeight: '100vh' }}>
      <Box sx={{ bgcolor: 'background.paper', borderBottom: '1px solid', borderColor: 'divider' }}>
        <Container maxWidth="sm" sx={{ px: 2, py: 2 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <IconButton onClick={() => router.back()}>
              <ArrowBackIcon />
            </IconButton>
            <Typography variant="h6" sx={{ fontWeight: 600, flex: 1 }}>
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
            </Typography>
          </Box>
        </Container>
      </Box>

      <Container maxWidth="sm" sx={{ px: 2, py: 3 }}>
        <Box sx={{ textAlign: 'center', mb: 3 }}>
          <Box
            sx={{
              width: 80,
              height: 80,
              borderRadius: '50%',
              bgcolor: '#FFF3E0',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto',
              mb: 2
            }}
          >
            <StoreIcon sx={{ fontSize: 40, color: '#F57C00' }} />
          </Box>
          <Typography variant="h5" fontWeight={600} sx={{ mb: 1 }}>
            ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≤‡∏´‡∏≤‡∏£
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          </Typography>
        </Box>

        <Card sx={{ borderRadius: 3 }}>
          <CardContent sx={{ p: 3 }}>
            <form onSubmit={handleSubmit}>
              {error && (
                <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
                  {error}
                </Alert>
              )}

              {locationState.error && (
                <Alert severity="warning" sx={{ mb: 3, borderRadius: 2 }}>
                  {locationState.error}
                </Alert>
              )}

              <Typography variant="h6" fontWeight={600} sx={{ mb: 2, color: '#1976D2' }}>
                üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
              </Typography>

              <TextField
                fullWidth
                label="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô"
                value={formData.ownerName}
                onChange={handleInputChange('ownerName')}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <PersonIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
                required
              />

              <TextField
                fullWidth
                label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                type="email"
                value={formData.email}
                onChange={handleInputChange('email')}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <EmailIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
                required
              />

              <TextField
                fullWidth
                label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                value={formData.phone}
                onChange={handleInputChange('phone')}
                placeholder="0812345678"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <PhoneIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
                required
              />

              <TextField
                fullWidth
                label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                type={showPassword ? 'text' : 'password'}
                value={formData.password}
                onChange={handleInputChange('password')}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <LockIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowPassword(!showPassword)}
                        edge="end"
                      >
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
                required
              />

              <TextField
                fullWidth
                label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                type={showConfirmPassword ? 'text' : 'password'}
                value={formData.confirmPassword}
                onChange={handleInputChange('confirmPassword')}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <LockIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        edge="end"
                      >
                        {showConfirmPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 3 }}
                required
              />

              <Divider sx={{ my: 3 }} />

              <Typography variant="h6" fontWeight={600} sx={{ mb: 2, color: '#F57C00' }}>
                üè™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
              </Typography>

              <TextField
                fullWidth
                label="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
                value={formData.restaurantName}
                onChange={handleInputChange('restaurantName')}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <BusinessIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 2 }}
                required
              />

              <TextField
                fullWidth
                label="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                multiline
                rows={2}
                value={formData.description}
                onChange={handleInputChange('description')}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏ó‡πâ ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡πâ‡∏ô‡∏ï‡∏≥‡∏£‡∏±‡∏ö..."
                sx={{ mb: 2 }}
              />

              {/* Address with Location Button */}
              <Box sx={{ mb: 2 }}>
                <TextField
                  fullWidth
                  label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô"
                  multiline
                  rows={3}
                  value={formData.address}
                  onChange={handleInputChange('address')}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start" sx={{ alignSelf: 'flex-start', mt: 1 }}>
                        <LocationIcon sx={{ color: 'text.secondary' }} />
                      </InputAdornment>
                    ),
                  }}
                  required
                />
                
                <Button
                  variant={locationState.coordinates ? "contained" : "outlined"}
                  size="small"
                  startIcon={<MyLocationIcon />}
                  onClick={getCurrentLocation}
                  disabled={locationState.loading}
                  sx={{
                    mt: 1,
                    borderColor: locationState.coordinates ? '#FF9800' : '#FF9800',
                    color: locationState.coordinates ? 'white' : '#FF9800',
                    bgcolor: locationState.coordinates ? '#FF9800' : 'transparent',
                    '&:hover': {
                      borderColor: '#F57C00',
                      bgcolor: locationState.coordinates ? '#F57C00' : 'rgba(255, 152, 0, 0.04)'
                    }
                  }}
                  fullWidth
                >
                  {locationState.loading ? (
                    <>
                      <CircularProgress size={16} sx={{ mr: 1 }} />
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á...
                    </>
                  ) : locationState.coordinates ? (
                    '‚úì ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß'
                  ) : (
                    '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)'
                  )}
                </Button>

                {/* Location Status Alert */}
                {!locationState.coordinates && !locationState.loading && (
                  <Alert severity="warning" sx={{ mt: 2, borderRadius: 2 }}>
                    <Typography variant="body2">
                      <strong>‚ö†Ô∏è ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                    </Typography>
                  </Alert>
                )}

                {/* Mini Map Display */}
                {locationState.coordinates && (
                  <Card elevation={2} sx={{ mt: 2, overflow: 'hidden', borderRadius: 2 }}>
                    <Box sx={{ 
                      bgcolor: '#FF9800', 
                      color: 'white', 
                      p: 1.5,
                      display: 'flex',
                      alignItems: 'center',
                      gap: 1
                    }}>
                      <LocationIcon fontSize="small" />
                      <Typography variant="subtitle2" sx={{ fontWeight: 600 }}>
                        ‚úì ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô
                      </Typography>
                    </Box>
                    
                    <GoogleMapEmbed
                      latitude={locationState.coordinates.lat}
                      longitude={locationState.coordinates.lng}
                      address={formData.address}
                      zoom={16}
                      height={250}
                    />
                  </Card>
                )}
              </Box>

              <TextField
                fullWidth
                label="‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                value={formData.deliveryTime}
                onChange={handleInputChange('deliveryTime')}
                placeholder="‡πÄ‡∏ä‡πà‡∏ô 30-45 ‡∏ô‡∏≤‡∏ó‡∏µ"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <ScheduleIcon sx={{ color: 'text.secondary' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{ mb: 3 }}
              />

              <Button
                type="submit"
                fullWidth
                variant="contained"
                size="large"
                disabled={loading}
                sx={{
                  bgcolor: '#FF9800',
                  color: '#fff',
                  fontWeight: 600,
                  py: 1.5,
                  borderRadius: 2,
                  '&:hover': {
                    bgcolor: '#F57C00',
                  },
                  '&:disabled': {
                    bgcolor: '#FF9800',
                    opacity: 0.7,
                  }
                }}
              >
                {loading ? (
                  <CircularProgress size={24} sx={{ color: '#fff' }} />
                ) : (
                  '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
                )}
              </Button>
            </form>
          </CardContent>
        </Card>
        <Box sx={{ textAlign: 'center', mt: 3 }}>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
            ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡πâ‡∏ß?
          </Typography>
          <Button
            variant="text"
            onClick={() => router.push('/login')}
            sx={{
              color: '#F57C00',
              fontWeight: 600,
              textTransform: 'none'
            }}
          >
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </Button>
        </Box>
      </Container>
    </Box>
  )
}

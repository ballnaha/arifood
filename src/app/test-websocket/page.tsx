'use client';

import { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Card,
  CardContent,
  Button,
  TextField,
  Chip,
  Alert,
  Divider,
  Grid,
  List,
  ListItem,
  ListItemText,
  Paper,
  CardActions,
  Select,
  MenuItem,
  FormControl,
  InputLabel
} from '@mui/material';
import {
  Send as SendIcon,
  Wifi as WifiIcon,
  WifiOff as WifiOffIcon,
  Restaurant as RestaurantIcon,
  Person as PersonIcon,
  CheckCircle,
  Error,
  Refresh,
  NetworkCheck,
  DeliveryDining,
  CampaignOutlined
} from '@mui/icons-material';
import { useSocket } from '@/hooks/useSocket';

export default function TestWebSocketPage() {
  const { isConnected, error, connect, disconnect, emit, on, off } = useSocket();
  const [logs, setLogs] = useState<string[]>([]);
  const [testMessage, setTestMessage] = useState('');
  const [connectionStatus, setConnectionStatus] = useState<string>('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
  const [targetType, setTargetType] = useState<'restaurant' | 'customer' | 'rider' | 'broadcast'>('restaurant');
  const [targetId, setTargetId] = useState('test-restaurant');
  const [groupMessage, setGroupMessage] = useState('');

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° log
  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString('th-TH');
    setLogs(prev => [`[${timestamp}] ${message}`, ...prev.slice(0, 29)]);
  };

  useEffect(() => {
    if (isConnected) {
      setConnectionStatus('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‚úÖ');
      addLog('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Socket.IO ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else if (error) {
      setConnectionStatus(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${error}`);
      addLog(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${error}`);
    } else {
      setConnectionStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');
    }
  }, [isConnected, error]);

  useEffect(() => {
    // ‡∏ü‡∏±‡∏á test message echo
    const handleTestMessage = (data: any) => {
      addLog(`‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${JSON.stringify(data)}`);
    };

    const handleJoinedRoom = (data: any) => {
      addLog(`‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.room} (${data.type})`);
    };

    // ‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const handleNewOrder = (data: any) => {
      addLog(`üçΩÔ∏è [NEW ORDER]: ${JSON.stringify(data)}`);
    };

    const handleOrderUpdate = (data: any) => {
      addLog(`üìù [ORDER UPDATE]: ${JSON.stringify(data)}`);
    };

    const handleDeliveryUpdate = (data: any) => {
      addLog(`üöö [DELIVERY UPDATE]: ${JSON.stringify(data)}`);
    };

    const handleGroupMessage = (data: any) => {
      addLog(`üì¢ [GROUP MESSAGE]: ${JSON.stringify(data)}`);
    };

    on('test-message', handleTestMessage);
    on('joined-room', handleJoinedRoom);
    on('new-order', handleNewOrder);
    on('order-update', handleOrderUpdate);
    on('delivery-update', handleDeliveryUpdate);
    on('group-message', handleGroupMessage);

    return () => {
      off('test-message', handleTestMessage);
      off('joined-room', handleJoinedRoom);
      off('new-order', handleNewOrder);
      off('order-update', handleOrderUpdate);
      off('delivery-update', handleDeliveryUpdate);
      off('group-message', handleGroupMessage);
    };
  }, [on, off]);

  const handleSendTestMessage = () => {
    if (testMessage.trim()) {
      addLog(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${testMessage}`);
      emit('test-message', { message: testMessage, timestamp: new Date().toISOString() });
      setTestMessage('');
    }
  };

  const handleJoinRestaurantRoom = () => {
    addLog('‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (ID: test-restaurant)');
    emit('join-restaurant', 'test-restaurant');
  };

  const handleJoinCustomerRoom = () => {
    addLog('‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (ID: test-customer)');
    emit('join-customer', 'test-customer');
  };

  const handleJoinRiderRoom = () => {
    addLog('‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå (ID: test-rider)');
    emit('join-rider', 'test-rider');
  };

  const handleSendGroupMessage = async () => {
    if (!groupMessage.trim()) return;

    const messageData = {
      message: groupMessage,
      timestamp: new Date().toISOString(),
      from: 'test-websocket'
    };

    if (targetType === 'broadcast') {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
      addLog(`üì¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°: ${groupMessage}`);
      
      try {
        const response = await fetch('/api/notifications/broadcast', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message: groupMessage,
            type: 'test-message'
          })
        });
        
        if (response.ok) {
          addLog('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° broadcast ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } else {
          addLog('‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° broadcast ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }
      } catch (error) {
        addLog(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
      }
    } else {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      const roomName = `${targetType}-${targetId}`;
      addLog(`üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ ${roomName}: ${groupMessage}`);
      
      try {
        const response = await fetch('/api/notifications/send', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            targetType,
            targetId,
            message: groupMessage,
            type: 'group-message'
          })
        });
        
        if (response.ok) {
          addLog(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ ${roomName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } else {
          addLog(`‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ ${roomName} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        }
      } catch (error) {
        addLog(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
      }
    }

    setGroupMessage('');
  };

  const clearLogs = () => {
    setLogs([]);
  };

  const getTargetIcon = () => {
    switch (targetType) {
      case 'restaurant': return <RestaurantIcon />;
      case 'customer': return <PersonIcon />;
      case 'rider': return <DeliveryDining />;
      case 'broadcast': return <CampaignOutlined />;
      default: return <SendIcon />;
    }
  };

  const getTargetLabel = () => {
    switch (targetType) {
      case 'restaurant': return '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£';
      case 'customer': return '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤';
      case 'rider': return '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå';
      case 'broadcast': return '‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°';
      default: return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Typography variant="h4" gutterBottom>
        üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö WebSocket
      </Typography>

      {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 3 }}>
        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ */}
        <Box sx={{ flex: 1 }}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
              </Typography>
              
              <Box sx={{ mb: 2 }}>
                <Chip 
                  icon={isConnected ? <CheckCircle /> : <Error />}
                  label={connectionStatus}
                  color={isConnected ? 'success' : 'error'}
                  variant="outlined"
                />
              </Box>

              {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  <strong>‡πÄ‡∏≠‡∏≠‡∏£‡πå:</strong> {error}
                </Alert>
              )}

              <Typography variant="body2" color="text.secondary">
                URL: {typeof window !== 'undefined' ? window.location.origin : 'N/A'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Path: /api/socket
              </Typography>
            </CardContent>
            
            <CardActions>
              <Button 
                variant="outlined" 
                onClick={connect}
                disabled={isConnected}
                startIcon={<NetworkCheck />}
              >
                ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
              </Button>
              <Button 
                variant="outlined" 
                onClick={disconnect}
                disabled={!isConnected}
                color="error"
              >
                ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
              </Button>
            </CardActions>
          </Card>
        </Box>

        {/* ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
        <Box sx={{ flex: 1 }}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
              </Typography>

              <Box sx={{ mb: 2 }}>
                <TextField
                  fullWidth
                  label="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                  value={testMessage}
                  onChange={(e) => setTestMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendTestMessage()}
                  disabled={!isConnected}
                />
              </Box>

              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                <Button 
                  variant="contained" 
                  onClick={handleSendTestMessage}
                  disabled={!isConnected || !testMessage.trim()}
                  startIcon={<SendIcon />}
                  fullWidth
                >
                  ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                </Button>
                
                <Button 
                  variant="outlined" 
                  onClick={handleJoinRestaurantRoom}
                  disabled={!isConnected}
                  startIcon={<RestaurantIcon />}
                  fullWidth
                >
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                </Button>
                
                <Button 
                  variant="outlined" 
                  onClick={handleJoinCustomerRoom}
                  disabled={!isConnected}
                  startIcon={<PersonIcon />}
                  fullWidth
                >
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </Button>

                <Button 
                  variant="outlined" 
                  onClick={handleJoinRiderRoom}
                  disabled={!isConnected}
                  startIcon={<DeliveryDining />}
                  fullWidth
                >
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Box>
      </Box>

      {/* ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° */}
      <Box sx={{ mb: 3 }}>
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              üì¢ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
            </Typography>

            <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 2, mb: 2 }}>
              <FormControl sx={{ minWidth: 150 }}>
                <InputLabel>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</InputLabel>
                <Select
                  value={targetType}
                  label="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
                  onChange={(e) => {
                    const newType = e.target.value as typeof targetType;
                    setTargetType(newType);
                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ID ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                    if (newType === 'restaurant') setTargetId('test-restaurant');
                    else if (newType === 'customer') setTargetId('test-customer');
                    else if (newType === 'rider') setTargetId('test-rider');
                    else setTargetId('');
                  }}
                  startAdornment={getTargetIcon()}
                >
                  <MenuItem value="restaurant">
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <RestaurantIcon /> ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                    </Box>
                  </MenuItem>
                  <MenuItem value="customer">
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <PersonIcon /> ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                    </Box>
                  </MenuItem>
                  <MenuItem value="rider">
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <DeliveryDining /> ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
                    </Box>
                  </MenuItem>
                                     <MenuItem value="broadcast">
                     <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                       <CampaignOutlined /> ‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
                     </Box>
                   </MenuItem>
                </Select>
              </FormControl>

              {targetType !== 'broadcast' && (
                <TextField
                  label="ID ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
                  value={targetId}
                  onChange={(e) => setTargetId(e.target.value)}
                  sx={{ minWidth: 200 }}
                  placeholder={`‡πÄ‡∏ä‡πà‡∏ô ${targetType}-1`}
                />
              )}
            </Box>

            <Box sx={{ mb: 2 }}>
              <TextField
                fullWidth
                label={`‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á${getTargetLabel()}`}
                value={groupMessage}
                onChange={(e) => setGroupMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendGroupMessage()}
                disabled={!isConnected}
                multiline
                rows={2}
                placeholder={targetType === 'broadcast' ? '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°' : `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ ${targetType}-${targetId}`}
              />
            </Box>

            <Button 
              variant="contained" 
              onClick={handleSendGroupMessage}
              disabled={!isConnected || !groupMessage.trim() || (targetType !== 'broadcast' && !targetId.trim())}
              startIcon={getTargetIcon()}
              color={targetType === 'broadcast' ? 'warning' : 'primary'}
              fullWidth
            >
              ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ{getTargetLabel()} {targetType !== 'broadcast' && `(${targetId})`}
            </Button>
          </CardContent>
        </Card>
      </Box>

      {/* Logs */}
      <Box sx={{ mb: 3 }}>
        <Paper sx={{ p: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6">
              üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            </Typography>
            <Button 
              variant="outlined" 
              size="small"
              onClick={clearLogs}
              startIcon={<Refresh />}
            >
              ‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            </Button>
          </Box>

          <Box 
            sx={{ 
              height: 400, 
              overflow: 'auto', 
              bgcolor: 'grey.50', 
              p: 2, 
              borderRadius: 1,
              fontFamily: 'monospace'
            }}
          >
            {logs.length === 0 ? (
              <Typography color="text.secondary">
                ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
              </Typography>
            ) : (
              <List dense>
                {logs.map((log, index) => (
                  <ListItem key={index} sx={{ py: 0.5 }}>
                    <ListItemText 
                      primary={log}
                      sx={{ 
                        '& .MuiListItemText-primary': { 
                          fontSize: '0.875rem',
                          fontFamily: 'monospace'
                        }
                      }}
                    />
                  </ListItem>
                ))}
              </List>
            )}
          </Box>
        </Paper>
      </Box>

      {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ */}
      <Box>
        <Alert severity="info">
          <Typography variant="h6" gutterBottom>
            üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
          </Typography>
          <Typography variant="body2" paragraph>
            <strong>‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°:</strong>
          </Typography>
          <ul>
            <li><strong>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£:</strong> ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á restaurant-{targetId}</li>
            <li><strong>‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á customer-{targetId}</li>
            <li><strong>‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå:</strong> ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á rider-{targetId}</li>
            <li><strong>‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°:</strong> ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</li>
          </ul>
          <Typography variant="body2" sx={{ mt: 2 }}>
            <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á" ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
          </Typography>
        </Alert>
      </Box>
    </Container>
  );
} 
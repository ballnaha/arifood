// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  password     String
  name         String
  role         UserRole   @default(CUSTOMER)
  phone        String?
  address      String?
  latitude     Float?
  longitude    Float?
  lineUserId   String?    @unique  // สำหรับ LINE Login
  avatar       String?    // รูปโปรไฟล์
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relationships
  restaurant        Restaurant?
  customerOrders    Order[]     @relation("CustomerOrders")
  riderProfile      Rider?
  deliveredOrders   Order[]     @relation("RiderOrders")
}

model Rider {
  id                String         @id @default(cuid())
  userId            String         @unique
  licenseNumber     String?        // หมายเลขใบขับขี่
  vehicleType       VehicleType    @default(MOTORCYCLE)
  vehiclePlate      String?        // ทะเบียนรถ
  bankAccount       String?        // เลขบัญชีธนาคาร
  bankName          String?        // ชื่อธนาคาร
  status            RiderStatus    @default(PENDING)
  isOnline          Boolean        @default(false)
  currentLatitude   Float?         // ตำแหน่งปัจจุบัน
  currentLongitude  Float?
  rating            Float          @default(0)
  totalDeliveries   Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  user              User           @relation(fields: [userId], references: [id])
  deliveries        Delivery[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  originalPrice Float?  // ราคาเดิม
  price       Float     // ราคาปัจจุบัน (ราคาขาย)
  image       String?
  isActive    Boolean   @default(true)
  rating      Float     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])
  
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  
  orderItems   OrderItem[]
  cartItems    CartItem[]
  addOns       ProductAddOn[]
}

model Restaurant {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String?
  address      String?
  latitude     Float?
  longitude    Float?
  phone        String?
  email        String?
  image        String?
  rating       Float     @default(0)
  deliveryTime String?   // เช่น "15-25 นาที"
  deliveryFee  Float     @default(0)  // ค่าจัดส่ง
  minimumOrder Float     @default(0)  // ยอดสั่งซื้อขั้นต่ำ
  status       RestaurantStatus @default(PENDING)  // สถานะการอนุมัติ
  isActive     Boolean   @default(true)
  isOpen       Boolean   @default(true)  // สถานะเปิด/ปิดร้าน
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  ownerId      String    @unique
  owner        User      @relation(fields: [ownerId], references: [id])
  
  products     Product[]
  orders       Order[]
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerId      String?     // เชื่อมโยงกับ User (Customer)
  customerName    String
  customerPhone   String
  customerAddress String
  customerLatitude Float?
  customerLongitude Float?
  riderId         String?     // เชื่อมโยงกับ User (Rider)
  subtotalAmount  Float       // ราคารวมอาหาร
  deliveryFee     Float       @default(0)  // ค่าจัดส่ง
  totalAmount     Float       // ราคารวมทั้งหมด
  status          OrderStatus @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH)
  paymentStatus   PaymentStatus @default(PENDING)
  specialInstructions String?  // คำแนะนำพิเศษ
  estimatedDeliveryTime DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  
  customer     User?       @relation("CustomerOrders", fields: [customerId], references: [id])
  rider        User?       @relation("RiderOrders", fields: [riderId], references: [id])
  
  orderItems   OrderItem[]
  delivery     Delivery?
}

model Delivery {
  id                String         @id @default(cuid())
  orderId           String         @unique
  riderId           String
  pickupLatitude    Float?         // ตำแหน่งร้านอาหาร
  pickupLongitude   Float?
  deliveryLatitude  Float?         // ตำแหน่งลูกค้า
  deliveryLongitude Float?
  status            DeliveryStatus @default(ASSIGNED)
  pickedUpAt        DateTime?      // เวลาที่รับอาหารจากร้าน
  deliveredAt       DateTime?      // เวลาที่ส่งถึงลูกค้า
  estimatedDistance Float?         // ระยะทางประมาณ (กิโลเมตร)
  actualDistance    Float?         // ระยะทางจริง
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  order   Order @relation(fields: [orderId], references: [id])
  rider   Rider @relation(fields: [riderId], references: [id])
  
  trackingUpdates DeliveryTracking[]
}

model DeliveryTracking {
  id         String   @id @default(cuid())
  deliveryId String
  latitude   Float
  longitude  Float
  status     DeliveryStatus
  notes      String?  // หมายเหตุเพิ่มเติม
  createdAt  DateTime @default(now())
  
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  instructions String?
  
  orderId  String
  order    Order   @relation(fields: [orderId], references: [id])
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  addOns   OrderItemAddOn[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  userId    String?  // เชื่อมโยงกับ User แทน sessionId
  sessionId String?  // เก็บไว้สำหรับ guest users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
  @@unique([sessionId, productId])
}

model AddOn {
  id          String    @id @default(cuid())
  name        String
  price       Float
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    ProductAddOn[]
  orderItems  OrderItemAddOn[]
}

model ProductAddOn {
  id        String   @id @default(cuid())
  productId String
  addOnId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  addOn     AddOn    @relation(fields: [addOnId], references: [id], onDelete: Cascade)
  
  @@unique([productId, addOnId])
}

model OrderItemAddOn {
  id          String @id @default(cuid())
  orderItemId String
  addOnId     String
  quantity    Int    @default(1)
  price       Float
  
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  addOn       AddOn     @relation(fields: [addOnId], references: [id])
  
  @@unique([orderItemId, addOnId])
}

// Enums
enum RestaurantStatus {
  PENDING    // รอการอนุมัติ
  APPROVED   // อนุมัติแล้ว
  REJECTED   // ถูกปฏิเสธ
  SUSPENDED  // ถูกระงับ
}

enum OrderStatus {
  PENDING           // รอยืนยันจากร้าน
  CONFIRMED         // ร้านยืนยันแล้ว
  PREPARING         // กำลังเตรียมอาหาร
  READY_FOR_PICKUP  // อาหารพร้อมรับ
  ASSIGNED_RIDER    // จัดไรเดอร์แล้ว
  PICKED_UP         // ไรเดอร์รับอาหารแล้ว
  OUT_FOR_DELIVERY  // กำลังจัดส่ง
  DELIVERED         // จัดส่งสำเร็จ
  CANCELLED         // ยกเลิก
}

enum DeliveryStatus {
  ASSIGNED          // จัดไรเดอร์แล้ว
  GOING_TO_PICKUP   // กำลังไปรับอาหาร
  ARRIVED_PICKUP    // ถึงร้านแล้ว
  PICKED_UP         // รับอาหารแล้ว
  GOING_TO_DELIVERY // กำลังไปส่ง
  ARRIVED_DELIVERY  // ถึงที่หมายแล้ว
  DELIVERED         // ส่งสำเร็จ
  FAILED            // จัดส่งไม่สำเร็จ
}

enum UserRole {
  CUSTOMER
  RESTAURANT_OWNER
  RIDER
  ADMIN
}

enum RiderStatus {
  PENDING    // รอการอนุมัติ
  APPROVED   // อนุมัติแล้ว
  REJECTED   // ถูกปฏิเสธ
  SUSPENDED  // ถูกระงับ
}

enum VehicleType {
  MOTORCYCLE  // มอเตอร์ไซค์
  BICYCLE     // จักรยาน
  CAR         // รถยนต์
  WALK        // เดินเท้า
}

enum PaymentMethod {
  CASH           // เงินสด
  CREDIT_CARD    // บัตรเครดิต
  MOBILE_BANKING // โมบายแบงก์กิ้ง
  E_WALLET       // กระเป๋าเงินอิเล็กทรอนิกส์
}

enum PaymentStatus {
  PENDING    // รอการชำระเงิน
  PAID       // ชำระเงินแล้ว
  FAILED     // การชำระเงินล้มเหลว
  REFUNDED   // คืนเงินแล้ว
}
